// This file generated by AnterleTool.
// Dont modifiy it.
// clang-format off

#include "scripting/glm/generated/vectors/vec3.hpp"

namespace Anterle::Scripting {
void bind_vec3(sol::state &lua)
{
auto multiplication_overloads = sol::overload(
    [](const glm::vec3 &v1, glm::vec3 v2) { return v1 * v2; },
    [](const glm::vec3 &v1, float v2) { return v1 * v2; },
    [](const float &v1, glm::vec3 v2) { return v1 * v2; }
);
auto division_overloads = sol::overload(
    [](const glm::vec3 &v1, glm::vec3 v2) { return v1 / v2; },
    [](const glm::vec3 &v1, float v2) { return v1 / v2; },
    [](const float &v1, glm::vec3 v2) { return v1 / v2; }
);
auto addition_overloads = sol::overload(
    [](const glm::vec3 &v1, glm::vec3 v2) { return v1 + v2; },
    [](const glm::vec3 &v1, float v2) { return v1 + v2; },
    [](const float &v1, glm::vec3 v2) { return v1 + v2; }
);
auto subtraction_overloads = sol::overload(
    [](const glm::vec3 &v1, glm::vec3 v2) { return v1 - v2; },
    [](const glm::vec3 &v1, float v2) { return v1 - v2; },
    [](const float &v1, glm::vec3 v2) { return v1 - v2; }
);
    lua.new_usertype<glm::vec3>("vec3",
        sol::call_constructor,
        sol::constructors<glm::vec3(float), glm::vec3(float, float, float)>(),
        "x", &glm::vec3::x,
        "y", &glm::vec3::y,
        "z", &glm::vec3::z,
        "r", &glm::vec3::r,
        "g", &glm::vec3::g,
        "b", &glm::vec3::b,
        "s", &glm::vec3::s,
        "t", &glm::vec3::t,
        "p", &glm::vec3::p,
        sol::meta_function::multiplication, multiplication_overloads,
        sol::meta_function::division, division_overloads,
        sol::meta_function::addition, addition_overloads,
        sol::meta_function::subtraction, subtraction_overloads,
        "length", [](const glm::vec3 &v) { return glm::length(v); }
    );
}
}// namespace Anterle::Scripting
// clang-format on
